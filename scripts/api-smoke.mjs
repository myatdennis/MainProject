#!/usr/bin/env node
import process from 'node:process';
import { setTimeout as delay } from 'node:timers/promises';

const baseUrl = process.env.API_BASE_URL || 'http://localhost:8787';
const adminUserId = process.env.API_SMOKE_USER_ID || '00000000-0000-0000-0000-000000000000';

const applyAdminHeaders = (init = {}) => {
  const headers = init.headers instanceof Headers ? new Headers(init.headers) : new Headers(init.headers ?? {});
  headers.set('X-User-Role', 'admin');
  headers.set('X-User-Id', adminUserId);
  if (!headers.has('Content-Type') && init.method && init.method !== 'GET') {
    headers.set('Content-Type', 'application/json');
  }
  return { ...init, headers };
};

const fetchJson = async (path, init = {}) => {
  const res = await fetch(`${baseUrl}${path}`, applyAdminHeaders(init));
  if (!res.ok) {
    const body = await res.text();
    throw new Error(`${path} ${res.status} ${res.statusText}: ${body}`);
  }

  if (res.status === 204) {
    return null;
  }

  return res.json();
};

const run = async () => {
  try {
    console.log(`‚ÑπÔ∏è  Running API smoke checks against ${baseUrl}`);

    const health = await fetchJson('/api/health');
    console.log('‚úÖ /api/health', health);

    const courses = await fetchJson('/api/admin/courses');
    console.log(`‚úÖ /api/admin/courses returned ${courses.data?.length ?? 0} course(s)`);

    if ((courses.data?.length ?? 0) === 0) {
      console.log('‚ÑπÔ∏è  No courses found, creating seed course...');
      await fetchJson('/api/admin/courses', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          course: {
            id: 'smoke-course',
            title: 'Smoke Test Course',
            description: 'Temporary course created by API smoke test',
            status: 'draft',
            version: 1,
            meta: {}
          },
          modules: []
        })
      });
      await delay(250);
    }

    const publishedCourses = await fetchJson('/api/client/courses');
    console.log(`‚úÖ /api/client/courses returned ${publishedCourses.data?.length ?? 0} course(s)`);

    const organizations = await fetchJson('/api/admin/organizations');
    let orgId = organizations?.data?.[0]?.id;

    if (!orgId) {
      console.log('‚ÑπÔ∏è  No organizations found, creating smoke-org...');
      const createdOrg = await fetchJson('/api/admin/organizations', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: 'Smoke Test Org',
          type: 'Testing',
          contact_email: 'smoke@example.com',
          subscription: 'Standard',
          status: 'active'
        })
      });
      orgId = createdOrg?.data?.id;
    }

    if (!orgId) {
      throw new Error('Failed to resolve an organization for workspace smoke tests');
    }

    try {
      await fetchJson(`/api/admin/organizations/${orgId}/members`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: adminUserId, role: 'admin' })
      });
      console.log(`‚úÖ Confirmed smoke user membership for org ${orgId}`);
    } catch (err) {
      console.warn('‚ö†Ô∏è  Unable to ensure smoke membership (continuing):', err.message);
    }

    const workspace = await fetchJson(`/api/orgs/${orgId}/workspace`);
    const planCount = workspace?.data?.strategicPlans?.length ?? 0;
    console.log(`‚úÖ /api/orgs/${orgId}/workspace returned ${planCount} plan(s)`);

    const newPlan = await fetchJson(`/api/orgs/${orgId}/workspace/strategic-plans`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        content: 'Smoke test strategic plan content',
        createdBy: 'Smoke Tester'
      })
    });

    const planId = newPlan?.data?.id;
    if (planId) {
      await fetchJson(`/api/orgs/${orgId}/workspace/strategic-plans/${planId}`, { method: 'DELETE' });
      console.log(`‚úÖ Workspace strategic plan CRUD verified for org ${orgId}`);
    } else {
      console.warn('‚ö†Ô∏è  Workspace strategic plan creation did not return an id');
    }

    const createdNotification = await fetchJson('/api/admin/notifications', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        title: 'Smoke Notification',
        body: 'Generated by API smoke test',
        orgId
      })
    });

    if (createdNotification?.data?.id) {
      await fetchJson(`/api/admin/notifications/${createdNotification.data.id}/read`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ read: true })
      });

      await fetchJson(`/api/admin/notifications/${createdNotification.data.id}`, { method: 'DELETE' });
      console.log('‚úÖ Notifications endpoint verified');
    }

    console.log('üéâ  API smoke checks completed successfully');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå API smoke check failed:', error.message);
    process.exit(1);
  }
};

run();
