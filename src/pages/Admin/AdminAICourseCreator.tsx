import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { courseStore, generateId, calculateCourseDuration, countTotalLessons } from '../../store/courseStore';
import type { Course, Module, Lesson } from '../../store/courseStore';
import { Save, CheckCircle, Loader } from 'lucide-react';

// Mock AI generator - returns a Course shaped object specialized for DEIA
function mockAIGenerateDEIACourse(seed: { title?: string; audience?: string; length?: string; tone?: string }): Course {
  const id = generateId('course');
  const title = seed.title || `DEIA: ${seed.audience || 'Workplace'} Essentials`;

  const modules: Module[] = [];

  const sampleVideos = [
    'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',
    'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4'
  ];

  const topics = [
    'Foundations of DEIA',
    'Bias Awareness and Mitigation',
    'Inclusive Communication',
    'Building Psychological Safety',
    'Equitable Decision Making'
  ];

  topics.forEach((topic, idx) => {
    const moduleId = generateId('module');
    const lessons: Lesson[] = [];

    // overview video
    lessons.push({
      id: generateId('lesson'),
      title: `${topic} — Overview`,
      type: 'video',
      duration: '8 min',
      content: {
        videoUrl: sampleVideos[idx % sampleVideos.length],
        videoSourceType: 'external',
        transcript: `Transcript for ${topic}. This is autogenerated, editable, and copyright-safe.`,
        notes: `Key points for ${topic}.`,
        elements: []
      },
      completed: false,
      order: 1
    });

    // interactive scenario
    lessons.push({
      id: generateId('lesson'),
      title: `${topic} — Scenario Exercise`,
      type: 'interactive',
      duration: '10 min',
      content: {
        elements: [
          {
            id: generateId('interactive'),
            type: 'scenario',
            title: `${topic} Scenario`,
            order: 1,
            data: [
              {
                id: generateId('scenario'),
                title: 'The Situation',
                text: `You encounter a scenario related to ${topic}. Choose how to respond.`,
                choices: [
                  { id: generateId('choice'), text: 'Take corrective public action', feedback: 'May have mixed outcomes', isCorrect: false },
                  { id: generateId('choice'), text: 'Hold a private conversation', feedback: 'Good for context and trust', isCorrect: true }
                ]
              }
            ]
          }
        ]
      },
      completed: false,
      order: 2
    });

    // micro-quiz
    lessons.push({
      id: generateId('lesson'),
      title: `${topic} — Quick Check`,
      type: 'quiz',
      duration: '5 min',
      content: {
        questions: [
          {
            id: generateId('question'),
            text: `Which action best supports ${topic}?`,
            options: ['Option A', 'Option B', 'Option C'],
            correctAnswerIndex: 1,
            explanation: 'Option B is best because...'
          }
        ],
        passingScore: 60
      },
      completed: false,
      order: 3
    });

    modules.push({
      id: moduleId,
      title: topic,
      description: `Auto-generated module about ${topic}`,
      duration: '23 min',
      order: idx + 1,
      lessons,
      resources: []
    });
  });

  const course: Course = {
    id,
    title,
    description: `AI-generated DEIA training for ${seed.audience || 'organizations'}. Generated in ${seed.length || 'short'} format.`,
    status: 'draft',
    thumbnail: 'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=800',
    duration: `${modules.length * 23} min`,
    difficulty: 'Beginner',
    enrollments: 0,
    completions: 0,
    completionRate: 0,
    avgRating: 0,
    totalRatings: 0,
    createdBy: 'AI Course Creator',
    createdDate: new Date().toISOString(),
    lastUpdated: new Date().toISOString(),
    estimatedTime: `${modules.length * 23} minutes`,
    prerequisites: [],
    learningObjectives: [`Understand ${seed.audience || 'workplace'} DEIA fundamentals`, 'Be able to apply inclusive practices'],
    certification: { available: false, name: '', requirements: [], validFor: '1 year', renewalRequired: false },
    tags: ['DEIA', 'AI-generated', 'Training'],
    modules,
    keyTakeaways: ['DEIA context', 'Practical steps', 'Reflection prompts'],
    type: 'Video + Interactive',
    lessons: modules.reduce((sum, m) => sum + m.lessons.length, 0),
    rating: 0,
    progress: 0
  };

  // calculate accurate duration & lessons
  course.duration = calculateCourseDuration(course.modules);
  course.lessons = countTotalLessons(course.modules);

  return course;
}

const AdminAICourseCreator = () => {
  const navigate = useNavigate();
  const [audience, setAudience] = useState('Managers');
  const [length, setLength] = useState('short');
  const [tone, setTone] = useState('Practical');
  const [title, setTitle] = useState('');
  const [generating, setGenerating] = useState(false);
  const [generatedCourse, setGeneratedCourse] = useState<Course | null>(null);

  const handleGenerate = async () => {
    setGenerating(true);
    try {
      // In a real integration, call an AI service here and respect content policies and copyright.
      const course = mockAIGenerateDEIACourse({ title, audience, length, tone });
      setGeneratedCourse(course);
    } catch (err) {
      console.error('AI generation failed', err);
      alert('AI generation failed — try again.');
    } finally {
      setGenerating(false);
    }
  };

  const handleSaveDraft = () => {
    if (!generatedCourse) return alert('No generated course to save.');
    try {
      const created = courseStore.createCourse(generatedCourse);
      courseStore.saveCourse(created);
      setGeneratedCourse(created);
      alert('Course saved as draft. You can edit it in Course Builder.');
      navigate(`/admin/course-builder/${created.id}`);
    } catch (err) {
      console.error('Save failed', err);
      alert('Failed to save draft.');
    }
  };

  const handlePublish = () => {
    if (!generatedCourse) return alert('No generated course to publish.');
    try {
      const created = courseStore.createCourse(generatedCourse);
      const published = { ...created, status: 'published', publishedDate: new Date().toISOString() } as Course;
      courseStore.saveCourse(published);
      setGeneratedCourse(published);
      alert('Course published.');
      navigate(`/admin/course-builder/${published.id}`);
    } catch (err) {
      console.error('Publish failed', err);
      alert('Failed to publish course.');
    }
  };

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">AI Course Creator — DEIA Specialization</h1>

      <div className="bg-white border rounded-lg p-4 mb-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm text-gray-700 mb-2">Audience</label>
            <input value={audience} onChange={(e) => setAudience(e.target.value)} className="w-full px-3 py-2 border rounded" />
          </div>
          <div>
            <label className="block text-sm text-gray-700 mb-2">Length</label>
            <select value={length} onChange={(e) => setLength(e.target.value)} className="w-full px-3 py-2 border rounded">
              <option value="short">Short (30-45 min)</option>
              <option value="medium">Medium (60-90 min)</option>
              <option value="long">Long (2-4 hours)</option>
            </select>
          </div>
          <div>
            <label className="block text-sm text-gray-700 mb-2">Tone</label>
            <input value={tone} onChange={(e) => setTone(e.target.value)} className="w-full px-3 py-2 border rounded" />
          </div>
        </div>

        <div className="mt-4">
          <label className="block text-sm text-gray-700 mb-2">Optional Title</label>
          <input value={title} onChange={(e) => setTitle(e.target.value)} placeholder="Custom course title" className="w-full px-3 py-2 border rounded" />
        </div>

        <div className="mt-4 flex items-center space-x-3">
          <button onClick={handleGenerate} disabled={generating} className="bg-orange-500 text-white px-4 py-2 rounded flex items-center space-x-2">
            {generating ? <Loader className="h-4 w-4 animate-spin" /> : null}
            <span>{generating ? 'Generating…' : 'Generate Course'}</span>
          </button>
          <button onClick={() => { setGeneratedCourse(null); setTitle(''); }} className="px-4 py-2 border rounded">Reset</button>
        </div>
      </div>

      {generatedCourse && (
        <div className="bg-white border rounded-lg p-4">
          <h2 className="text-xl font-semibold mb-2">Generated Course Preview</h2>
          <p className="text-gray-600 mb-4">Title: {generatedCourse.title}</p>
          <p className="text-gray-600 mb-4">Description: {generatedCourse.description}</p>

          <div className="space-y-3 mb-4">
            {generatedCourse.modules.map((m) => (
              <div key={m.id} className="p-3 border rounded">
                <h3 className="font-medium">{m.title}</h3>
                <p className="text-sm text-gray-500 mb-2">{m.description}</p>
                <ul className="text-sm list-disc list-inside">
                  {m.lessons.map((l) => (
                    <li key={l.id}>{l.title} — {l.type} — {l.duration}</li>
                  ))}
                </ul>
              </div>
            ))}
          </div>

          <div className="flex items-center space-x-3">
            <button onClick={handleSaveDraft} className="bg-blue-500 text-white px-4 py-2 rounded flex items-center space-x-2">
              <Save className="h-4 w-4" />
              <span>Save Draft</span>
            </button>
            <button onClick={handlePublish} className="bg-green-600 text-white px-4 py-2 rounded flex items-center space-x-2">
              <CheckCircle className="h-4 w-4" />
              <span>Publish Course</span>
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminAICourseCreator;
