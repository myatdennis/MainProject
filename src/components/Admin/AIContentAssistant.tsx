import React, { useState } from 'react';
import { Brain, Wand2, CheckCircle, Lightbulb, Globe, Eye } from 'lucide-react';

interface ContentAnalysis {
  qualityScore: number;
  readabilityScore: number;
  accessibilityScore: number;
  engagementScore: number;
  suggestions: string[];
  autoGeneratedQuestions: Array<{
    question: string;
    options: string[];
    correctAnswer: number;
    difficulty: 'easy' | 'medium' | 'hard';
  }>;
}

const AIContentAssistant: React.FC = () => {
  const [content, setContent] = useState('');
  const [analysis, setAnalysis] = useState<ContentAnalysis | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [activeTab, setActiveTab] = useState<'analyze' | 'generate' | 'translate'>('analyze');

  const analyzeContent = async () => {
    if (!content.trim()) return;
    
    setIsAnalyzing(true);
    
    // Simulate AI analysis
    setTimeout(() => {
      const mockAnalysis: ContentAnalysis = {
        qualityScore: Math.floor(Math.random() * 30) + 70,
        readabilityScore: Math.floor(Math.random() * 25) + 75,
        accessibilityScore: Math.floor(Math.random() * 20) + 80,
        engagementScore: Math.floor(Math.random() * 35) + 65,
        suggestions: [
          'Add more interactive elements to increase engagement',
          'Use simpler vocabulary for better readability',
          'Include alt text for images to improve accessibility',
          'Break long paragraphs into shorter chunks',
          'Add real-world examples to illustrate concepts'
        ].slice(0, Math.floor(Math.random() * 3) + 2),
        autoGeneratedQuestions: [
          {
            question: 'What is the main concept discussed in this content?',
            options: ['Leadership', 'Communication', 'Teamwork', 'Problem Solving'],
            correctAnswer: 0,
            difficulty: 'easy'
          },
          {
            question: 'Which strategy is most effective for inclusive communication?',
            options: ['Active listening', 'Speaking loudly', 'Using complex terms', 'Avoiding eye contact'],
            correctAnswer: 0,
            difficulty: 'medium'
          },
          {
            question: 'How can bias impact team dynamics?',
            options: ['No impact', 'Improves efficiency', 'Creates barriers', 'Enhances creativity'],
            correctAnswer: 2,
            difficulty: 'hard'
          }
        ]
      };
      
      setAnalysis(mockAnalysis);
      setIsAnalyzing(false);
    }, 2000);
  };

  const generateContent = (type: 'introduction' | 'summary' | 'quiz') => {
    const mockContent = {
      introduction: `# Introduction to Inclusive Leadership

Welcome to this comprehensive module on inclusive leadership. In today's diverse workplace, effective leaders must cultivate an environment where all team members feel valued, heard, and empowered to contribute their unique perspectives.

## Learning Objectives
By the end of this module, you will be able to:
- Define inclusive leadership and its core principles
- Identify common barriers to inclusion
- Apply inclusive communication strategies
- Foster psychological safety within your team`,

      summary: `## Key Takeaways

**Inclusive Leadership Fundamentals:**
- Creates psychological safety for all team members
- Values diverse perspectives and experiences  
- Promotes equitable opportunities for growth
- Builds trust through authentic communication

**Action Items:**
1. Conduct a team inclusion assessment
2. Implement regular feedback sessions
3. Establish mentoring partnerships
4. Celebrate diverse achievements`,

      quiz: `## Assessment Questions

**Question 1:** Which behavior best demonstrates inclusive leadership?
a) Making all decisions independently
b) Actively seeking input from all team members
c) Focusing only on top performers
d) Avoiding difficult conversations

**Question 2:** What is psychological safety?
a) Physical security measures
b) A shared belief that the team is safe for interpersonal risk-taking
c) Financial job security
d) Having a secure office space`
    };

    setContent(mockContent[type]);
  };

  const getScoreColor = (score: number) => {
    if (score >= 85) return 'text-green-600 bg-green-100';
    if (score >= 70) return 'text-yellow-600 bg-yellow-100';
    return 'text-red-600 bg-red-100';
  };

  const translations = [
    { language: 'Spanish', flag: 'ðŸ‡ªðŸ‡¸' },
    { language: 'French', flag: 'ðŸ‡«ðŸ‡·' },
    { language: 'German', flag: 'ðŸ‡©ðŸ‡ª' },
    { language: 'Mandarin', flag: 'ðŸ‡¨ðŸ‡³' },
    { language: 'Japanese', flag: 'ðŸ‡¯ðŸ‡µ' },
    { language: 'Portuguese', flag: 'ðŸ‡µðŸ‡¹' }
  ];

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-900">AI-Powered Content Assistant</h2>

      {/* Tab Navigation */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8">
          <button
            onClick={() => setActiveTab('analyze')}
            className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${
              activeTab === 'analyze'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700'
            }`}
          >
            <Brain className="w-4 h-4" />
            <span>Content Analysis</span>
          </button>
          <button
            onClick={() => setActiveTab('generate')}
            className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${
              activeTab === 'generate'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700'
            }`}
          >
            <Wand2 className="w-4 h-4" />
            <span>Content Generation</span>
          </button>
          <button
            onClick={() => setActiveTab('translate')}
            className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${
              activeTab === 'translate'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700'
            }`}
          >
            <Globe className="w-4 h-4" />
            <span>Translation</span>
          </button>
        </nav>
      </div>

      {activeTab === 'analyze' && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Content Input */}
          <div className="bg-white rounded-lg border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Content to Analyze</h3>
            <textarea
              value={content}
              onChange={(e) => setContent(e.target.value)}
              placeholder="Paste your course content here for AI analysis..."
              className="w-full h-64 p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <button
              onClick={analyzeContent}
              disabled={!content.trim() || isAnalyzing}
              className="mt-4 w-full bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
            >
              {isAnalyzing ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  <span>Analyzing...</span>
                </>
              ) : (
                <>
                  <Brain className="w-4 h-4" />
                  <span>Analyze Content</span>
                </>
              )}
            </button>
          </div>

          {/* Analysis Results */}
          <div className="bg-white rounded-lg border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">AI Analysis Results</h3>
            {!analysis && !isAnalyzing && (
              <div className="text-center text-gray-500 py-8">
                <Brain className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                <p>Enter content and click "Analyze" to get AI insights</p>
              </div>
            )}

            {analysis && (
              <div className="space-y-6">
                {/* Quality Scores */}
                <div className="grid grid-cols-2 gap-4">
                  <div className="text-center">
                    <div className={`inline-flex px-3 py-1 rounded-full text-sm font-medium ${getScoreColor(analysis.qualityScore)}`}>
                      {analysis.qualityScore}%
                    </div>
                    <p className="text-xs text-gray-600 mt-1">Quality</p>
                  </div>
                  <div className="text-center">
                    <div className={`inline-flex px-3 py-1 rounded-full text-sm font-medium ${getScoreColor(analysis.readabilityScore)}`}>
                      {analysis.readabilityScore}%
                    </div>
                    <p className="text-xs text-gray-600 mt-1">Readability</p>
                  </div>
                  <div className="text-center">
                    <div className={`inline-flex px-3 py-1 rounded-full text-sm font-medium ${getScoreColor(analysis.accessibilityScore)}`}>
                      {analysis.accessibilityScore}%
                    </div>
                    <p className="text-xs text-gray-600 mt-1">Accessibility</p>
                  </div>
                  <div className="text-center">
                    <div className={`inline-flex px-3 py-1 rounded-full text-sm font-medium ${getScoreColor(analysis.engagementScore)}`}>
                      {analysis.engagementScore}%
                    </div>
                    <p className="text-xs text-gray-600 mt-1">Engagement</p>
                  </div>
                </div>

                {/* Suggestions */}
                <div>
                  <h4 className="font-medium text-gray-900 mb-2 flex items-center">
                    <Lightbulb className="w-4 h-4 mr-2 text-yellow-500" />
                    Improvement Suggestions
                  </h4>
                  <div className="space-y-2">
                    {analysis.suggestions.map((suggestion, index) => (
                      <div key={index} className="flex items-start space-x-2 text-sm text-gray-700">
                        <CheckCircle className="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" />
                        <span>{suggestion}</span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Auto-generated Questions */}
                <div>
                  <h4 className="font-medium text-gray-900 mb-2">Auto-Generated Quiz Questions</h4>
                  <div className="space-y-3">
                    {analysis.autoGeneratedQuestions.map((q, index) => (
                      <div key={index} className="border border-gray-200 rounded-lg p-3">
                        <div className="flex items-center justify-between mb-2">
                          <span className="text-sm font-medium text-gray-900">Question {index + 1}</span>
                          <span className={`px-2 py-1 rounded text-xs font-medium ${
                            q.difficulty === 'easy' ? 'bg-green-100 text-green-800' :
                            q.difficulty === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-red-100 text-red-800'
                          }`}>
                            {q.difficulty}
                          </span>
                        </div>
                        <p className="text-sm text-gray-700 mb-2">{q.question}</p>
                        <div className="space-y-1">
                          {q.options.map((option, optIndex) => (
                            <div key={optIndex} className={`text-xs p-2 rounded ${
                              optIndex === q.correctAnswer ? 'bg-green-50 text-green-700' : 'bg-gray-50 text-gray-600'
                            }`}>
                              {String.fromCharCode(97 + optIndex)}) {option}
                              {optIndex === q.correctAnswer && <CheckCircle className="w-3 h-3 inline ml-1" />}
                            </div>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {activeTab === 'generate' && (
        <div className="bg-white rounded-lg border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Content Generation</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <button
              onClick={() => generateContent('introduction')}
              className="p-6 border border-gray-200 rounded-lg hover:border-blue-500 hover:bg-blue-50 text-left"
            >
              <Wand2 className="w-8 h-8 text-blue-500 mb-3" />
              <h4 className="font-medium text-gray-900 mb-2">Generate Introduction</h4>
              <p className="text-sm text-gray-600">Create engaging module introductions with learning objectives</p>
            </button>

            <button
              onClick={() => generateContent('summary')}
              className="p-6 border border-gray-200 rounded-lg hover:border-green-500 hover:bg-green-50 text-left"
            >
              <CheckCircle className="w-8 h-8 text-green-500 mb-3" />
              <h4 className="font-medium text-gray-900 mb-2">Generate Summary</h4>
              <p className="text-sm text-gray-600">Create comprehensive summaries and key takeaways</p>
            </button>

            <button
              onClick={() => generateContent('quiz')}
              className="p-6 border border-gray-200 rounded-lg hover:border-purple-500 hover:bg-purple-50 text-left"
            >
              <Brain className="w-8 h-8 text-purple-500 mb-3" />
              <h4 className="font-medium text-gray-900 mb-2">Generate Quiz</h4>
              <p className="text-sm text-gray-600">Create assessment questions and answers</p>
            </button>
          </div>

          {content && (
            <div>
              <h4 className="font-medium text-gray-900 mb-2">Generated Content</h4>
              <div className="bg-gray-50 p-4 rounded-lg">
                <pre className="text-sm text-gray-700 whitespace-pre-wrap font-sans">{content}</pre>
              </div>
            </div>
          )}
        </div>
      )}

      {activeTab === 'translate' && (
        <div className="bg-white rounded-lg border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Multi-Language Translation</h3>
          
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {translations.map((lang) => (
              <button
                key={lang.language}
                className="p-4 border border-gray-200 rounded-lg hover:border-blue-500 hover:bg-blue-50 text-center"
              >
                <div className="text-2xl mb-2">{lang.flag}</div>
                <h4 className="font-medium text-gray-900">{lang.language}</h4>
                <p className="text-sm text-gray-600">Translate content</p>
              </button>
            ))}
          </div>

          <div className="mt-6 p-4 bg-blue-50 rounded-lg">
            <div className="flex items-center space-x-2 mb-2">
              <Eye className="w-5 h-5 text-blue-600" />
              <h4 className="font-medium text-blue-900">Accessibility Features</h4>
            </div>
            <ul className="text-sm text-blue-700 space-y-1">
              <li>â€¢ Right-to-left language support</li>
              <li>â€¢ Screen reader compatibility</li>
              <li>â€¢ Cultural context adaptation</li>
              <li>â€¢ Localized examples and case studies</li>
            </ul>
          </div>
        </div>
      )}
    </div>
  );
};

export default AIContentAssistant;